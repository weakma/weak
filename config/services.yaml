# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    fos_rest.throw_exception_on_unsupported_content_type: false
    fos_rest.body_default_format: json
    qiniu:
        access_key: '%env(QINIU_ACCESS_KEY)%'
        secret_key: '%env(QINIU_SECRET_KEY)%'
        bucket:
            video:
                domain: 'video.weak'
                policy:
                    persistentOps: "vframe/jpg/offset/1"
                    persistentNotifyUrl: '%env(API_URL)%/_api/common/qiniu/callback/fops'
                    persistentPipeline: "worker_video_pipe"
                    mimeLimit: "video/*;audio/*"
        default:
            policy:
                insertOnly: 1
                isPrefixalScope: 1
                detectMime: 1
                returnBody: '{"bucket":"$(bucket)","key":"$(key)","hash":"$(etag)","size":$(fsize),"origin_file_name":$(fname)}'
                saveKey: '$(year)$(mon)$(day)/$(etag)'
                fsizeMin: 1024 # 1KB
                fsizeLimit: 1024 * 1024 * 1024 # 100MB
                #callbackUrl: '/_api/common/qiniu/callbacks'
                #callbackHost: '%env(API_URL)%'
            image:
                domain: 'http://image.weak'
                policy:
                    mimeLimit: "image/*"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,Exception}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
#    templating:
#        alias: 'templating.engine.twig'
#        public: false
#    templating.name_parser:
#        class: 'Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser'
#    templating.locator:
#        class: 'Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator'
#        arguments:
#            $locator: '@file_locator'
    App\Services\QiniuService:
        arguments:
            $config: '%qiniu%'

